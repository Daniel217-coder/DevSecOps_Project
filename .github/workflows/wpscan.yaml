name: WPScan Local Automation

on:
  workflow_dispatch:

jobs:
  wp_scan:
    runs-on: self-hosted

    env:
      DB_PASSWORD: ${{ secrets.IONUT_COTOLAN_DB_PASS }}
      WP_ADMIN_PASS: ${{ secrets.IONUT_COTOLAN_WP_ADMIN_PASS }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create docker-compose.yml
        run: |
          cat <<EOF > docker-compose.yml
          version: "3.1"
          services:
            db:
              image: mysql:6.8
              restart: always
              environment:
                MYSQL_DATABASE: wordpress
                MYSQL_USER: wordpress
                MYSQL_PASSWORD: ${DB_PASSWORD}
                MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
              ports:
                - "3306:3306"
              volumes:
                - db_data:/var/lib/mysql

            wordpress:
              depends_on:
                - db
              image: wordpress:latest
              restart: always
              environment:
                WORDPRESS_DB_HOST: db:3306
                WORDPRESS_DB_USER: wordpress
                WORDPRESS_DB_PASSWORD: ${DB_PASSWORD}
                WORDPRESS_DB_NAME: wordpress
                WORDPRESS_CONFIG_EXTRA: |
                  define('WP_HOME','http://localhost:8000');
                  define('WP_SITEURL','http://localhost:8000');
              ports:
                - "8000:80"
              volumes:
                - ./wp-content:/var/www/html/wp-content

          volumes:
            db_data:
          EOF

      - name: Start WordPress and MySQL
        run: docker-compose up -d

      - name: Wait for WordPress to be ready
        run: |
          for i in {1..60}; do
            echo "Checking WordPress on localhost:8000..."
            if curl -s http://localhost:8000/wp-login.php | grep "WordPress"; then
              echo "WordPress is up!"
              break
            else
              echo "Not ready, waiting..."
              sleep 5
            fi
          done

      - name: Install WPScan (if not present)
        run: |
          if ! command -v wpscan >/dev/null 2>&1; then
            sudo gem install wpscan
          fi

      - name: Run WPScan scan (with API Token for full CVE output)
        run: |
          wpscan --url http://localhost:8000 \
                 --enumerate vp,vt,u \
                 --random-user-agent \
                 --api-token ${{ secrets.IONUT_COTOLAN_WPSCAN_TOKEN }} || true

      - name: Shut down Docker Compose
        run: docker-compose down
